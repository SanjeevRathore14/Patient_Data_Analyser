group_summarise_ops_UI <- function(id,field_names = NULL,counter_ui){
  ns <- NS(id)
  insertUI(
    selector = "#Data_Manupulation-DM_steps",
    where = "beforeEnd",
    immediate = TRUE,
    ui =
      tagList(tags$div(id = ns("DM_ops_main_div"),
                       fluidRow(class = paste0("DM_ops_blank_row"), 
                                tags$div(class = "DM_ops_div",paste0("Step ",counter_ui," : Group and Summarise")),
                                fluidRow(column(width = 9),
                                         column(width = 3,tags$div(class = "close_btn_DM_div",
                                                                   actionButton(inputId =  ns("remove_step"),
                                                                                label = NULL,icon = icon("times"))))),
                                fluidRow(column(12,
                                                selectizeInput(inputId = ns("group_col_name"),
                                                               label = "Grouping Column(s)",
                                                               choices = names(field_names[field_names %in% c("character","factor","date")]),
                                                               selected = NULL,
                                                               multiple = TRUE,
                                                               width = "100%",
                                                               options = list(placeholder = 'Select grouping column(s)')))),
                                fluidRow(column(12,
                                                selectizeInput(inputId = ns("summary_col_name"),
                                                               label = "Summarise Column(s)",
                                                               choices = names(field_names[field_names %in% c("numeric","integer","character","factor")]),
                                                               selected = NULL,
                                                               multiple = FALSE,
                                                               width = "100%",
                                                               options = list(placeholder = 'Select summarise column(s)')))),
                                fluidRow(column(12,
                                                selectizeInput(inputId = ns("summary_measure_name"),
                                                               label = "Aggregate Function(s)",
                                                               choices = NULL,
                                                               selected = NULL,
                                                               multiple = TRUE,
                                                               width = "100%",
                                                               options = list(placeholder = 'Select aggregate function(s)')))),
                                fluidRow(column(12,style="text-align: end;margin-top: 10px",
                                                actionButton(inputId = ns("confirm_changes_btn"),
                                                             label = "Apply Changes"))))))
  )
}


group_summarise_ops_server <- function(id,dataset,counter_ui) {
  moduleServer(
    id,
    function(input, output, session) {
      ops_id <- as.numeric(strsplit(id,split = "_")[[1]][3])
      ops_name <- strsplit(id,split = "_")[[1]][2]
      rv_return <- reactiveValues()
      rv_return$details <- list(data = as.data.frame(dataset),
                                operation_id = ops_id,
                                operation_name = ops_name,
                                cnf_btn_count = as.numeric(0),
                                remove_btn_count = as.numeric(0),
                                ops_counter_ui = counter_ui)
      
      observeEvent(input$summary_col_name,ignoreNULL = TRUE,{
        if(class(dataset[[input$summary_col_name]]) %in% c("character","factor")){
          updateSelectizeInput(session = session,
                               inputId = "summary_measure_name",
                               choices = char_ops_summarise_list,
                               selected = NULL)
        }else{
          updateSelectizeInput(session = session,
                               inputId = "summary_measure_name",
                               choices = numeric_ops_summarise_list,
                               selected = NULL)
        }
      })
      #observe event of confirm changes button
      observeEvent(input$confirm_changes_btn,ignoreInit = TRUE,{
        rv_return$group_summary_data <- dataset
        if(isTRUE(is.null(input$summary_col_name))){
          showModal(modalDialog(title = "Warning","No 'Summarise Column(s)' selected. Please select atleast one column in 'Summarise Column(s)' to perform the summarise operation.",fade = TRUE))
        }else if(isTRUE(is.null(input$summary_measure_name))){
          showModal(modalDialog(title = "Warning","No 'Aggregate Function(s)' selected. Please select atleast one function in 'Aggregate Function(s)' to perform the summarise operation.",fade = TRUE))
        }else if(input$summary_col_name %in% input$group_col_name){
          showModal(modalDialog(title = "Warning","'Summarise Column(s)' can't be same as grouping column(s). Please select another column to perform the summarise operation.",fade = TRUE))
        }else {
          rv_return$error_message <- tryCatch({
            rv_return$measure_list <- lapply(setNames(input$summary_measure_name,input$summary_measure_name), function(nameindex) {
              if(class(dataset[[input$summary_col_name]]) %in% c("character","factor")){
                eval(parse_expr(paste0("~",nameindex,"(.)")))
              }else{
                eval(parse_expr(paste0("~",nameindex,"(., na.rm = TRUE)")))
              }
            })
              dplyr_expr <- expr({
                rv_return$group_summary_data <- dataset %>% group_by_at(.vars = input[["group_col_name"]]) %>% 
                  summarise(across(.cols = c(!!sym(input$summary_col_name)),.fns = rv_return$measure_list, .names = "{col}_{.fn}"),.groups = 'drop') %>% 
                  mutate_if(is.numeric,round,digits = 2)
              })
            # evaluate expression
            eval(dplyr_expr)
            paste0("Successfully Executed")
          },warning = function(w){
            return(w)
          },error = function(e){
            return(e)
          })
          #cleaning of error message
          rv_return$error_message <- str_replace_all(as.character(rv_return$error_message), "[^[:alnum:]]", " ")
          rv_return$error_message <- str_split(rv_return$error_message," ")[[1]]
          rv_return$error_message <- rv_return$error_message[rv_return$error_message != ""]
          rv_return$error_message <- paste(rv_return$error_message,collapse = " ")
        }
        if(isFALSE(grepl("Successfully Executed",rv_return$error_message,ignore.case = TRUE))){
          print(rv_return$error_message)
        }
        rv_return$details <- list(data = as.data.frame(rv_return$group_summary_data),
                                  operation_id = ops_id,
                                  operation_name = ops_name,
                                  cnf_btn_count = as.numeric(input[["confirm_changes_btn"]]),
                                  remove_btn_count = as.numeric(input[["remove_step"]]),
                                  ops_counter_ui = counter_ui)
      })
      
      #observer event of close button
      observeEvent(input$remove_step,ignoreInit = TRUE,{
        rv_return$details <- list(data = as.data.frame(dataset),
                                  operation_id = ops_id,
                                  operation_name = ops_name,
                                  cnf_btn_count = as.numeric(input[["confirm_changes_btn"]]),
                                  remove_btn_count = as.numeric(input[["remove_step"]]),
                                  ops_counter_ui = counter_ui)
      })
      
      return(reactive(rv_return$details))
      
    }
  )
}


group_summarise_ops_remove_UI <- function(id) {
  moduleServer(
    id,
    function(input, output, session) {
      ns <- session$ns
      removeUI(selector = paste0("#",ns("DM_ops_main_div")),
               immediate = TRUE)
    })
}
