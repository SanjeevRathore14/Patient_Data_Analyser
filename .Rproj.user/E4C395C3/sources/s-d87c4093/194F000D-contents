mutate_percentage_ops_UI <- function(id,field_names = NULL,counter_ui){
  ns <- NS(id)
  insertUI(
    selector = "#Data_Manupulation-DM_steps",
    where = "beforeEnd",
    immediate = TRUE,
    ui =
      tagList(tags$div(id = ns("DM_ops_main_div"),
                       fluidRow(class = paste0("DM_ops_blank_row"), 
                                tags$div(class = "DM_ops_div",paste0("Step ",counter_ui," : Add Column - Percentage")),
                                fluidRow(column(width = 9),
                                         column(width = 3,tags$div(class = "close_btn_DM_div",
                                                                   actionButton(inputId =  ns("remove_step"),
                                                                                label = NULL,icon = icon("times"))))),
                                fluidRow(
                                  column(width = 12,
                                         pickerInput(inputId = ns("percentage_cols"),
                                                     label = tags$b("Select Variable(s)"),
                                                     choices = names(field_names[field_names %in% c("numeric","integer")]),
                                                     selected = names(field_names[field_names %in% c("numeric","integer")])[1],
                                                     multiple = TRUE,
                                                     width = "100%",
                                                     options = list(`live-search` = TRUE,
                                                                    'none-selected-text' = "None selected")))),
                                shiny::fluidRow(
                                  shiny::column(width = 6,
                                                #flag to set the name of grouping column(s)
                                                shiny::checkboxInput(inputId = ns("set_group_cols_flag"),
                                                                     label = "Set grouping var(s)")),
                                  shiny::column(width = 6,
                                                #selectize input tot get the name of grouping column(s)
                                                selectizeInput(inputId = ns("group_col_name"),
                                                               label = NULL,
                                                               choices = names(field_names[field_names %in% c("character","factor")]),
                                                               selected = NULL,
                                                               multiple = TRUE,
                                                               width = "100%",
                                                               options = list(placeholder = 'Select grouping column(s)')))),
                                fluidRow(column(12,style="text-align: end;margin-top: 10px",
                                                actionButton(inputId = ns("confirm_changes_btn"),
                                                             label = "Apply Changes"))))))
  )
}


mutate_percentage_ops_server <- function(id,dataset,counter_ui) {
  moduleServer(
    id,
    function(input, output, session) {
      ns <- session$ns
      ops_id <- as.numeric(strsplit(id,split = "_")[[1]][3])
      ops_name <- strsplit(id,split = "_")[[1]][2]
      rv_return <- reactiveValues()
      rv_return$details <- list(data = as.data.frame(dataset),
                                operation_id = ops_id,
                                operation_name = ops_name,
                                cnf_btn_count = as.numeric(0),
                                remove_btn_count = as.numeric(0),
                                ops_counter_ui = counter_ui)
      
      if(length(names(Filter(is.numeric, dataset))) == 0) {
        showModal(modalDialog(
          title = "No Numeric Column Found!",
          paste0("Selected data contains non numeric columns. Please first select numeric columns(s) in the dataset or upload the dataset which should have numeric column(s) to create a new column based on arithmetic calculation."),
          easyClose = FALSE,
          footer = modalButton("Dismiss")
        ))
      }
      
      #observe event for "set_group_cols_flag" check box to hide and show the selectize input of group column name 
      observeEvent(input$set_group_cols_flag,{
        if(input$set_group_cols_flag){
          shinyjs::show("group_col_name")
        }
        else{
          shinyjs::reset("group_col_name")
          shinyjs::hide("group_col_name")
        }
      })
      #function to calculate the percentage
      pct_cal <- function(var){
        return(round(as.numeric((var/sum(var,na.rm = TRUE)) * 100),2))
      }
      
      observeEvent(input$confirm_changes_btn,ignoreInit = TRUE,{
        rv_return$mutate_data <- dataset
        if(isTRUE(is.null(input$percentage_cols))){
          showModal(modalDialog(title = "Warning","No column is selected. Please select atleast one column to calculate the percentage.",fade = TRUE))
        }else{
            rv_return$error_message <-   tryCatch({
              dplyr_expr <- expr({
                rv_return$mutate_data <- rv_return$mutate_data %>% group_by_at(.vars = input[["group_col_name"]]) %>% 
                  mutate(across(input$percentage_cols,pct_cal,.names = "{col}_pct"))
              })
              eval(dplyr_expr)
              paste0("Successfully Executed")
            },warning = function(w){
              return(w)
            },error = function(e){
              return(e)
            })
        }
        if(isFALSE(is.null(rv_return$error_message))){
          rv_return$error_message <- str_replace_all(as.character(rv_return$error_message), "[^[:alnum:]]", " ")
          rv_return$error_message <- str_split(rv_return$error_message," ")[[1]]
          rv_return$error_message <- rv_return$error_message[rv_return$error_message != ""]
          rv_return$error_message <- paste(rv_return$error_message,collapse = " ")
          if(isFALSE(grepl("Successfully Executed",rv_return$error_message,ignore.case = TRUE ))){
            print(rv_return$error_message)
          }
        }
        rv_return$details <- list(data = as.data.frame(rv_return$mutate_data),
                                  operation_id = ops_id,
                                  operation_name = ops_name,
                                  cnf_btn_count = as.numeric(input[["confirm_changes_btn"]]),
                                  remove_btn_count = as.numeric(input[["remove_step"]]),
                                  ops_counter_ui = counter_ui)

      })
      
      #observer event of close button
      observeEvent(input$remove_step,ignoreInit = TRUE,{
        rv_return$details <- list(data = as.data.frame(dataset),
                                  operation_id = ops_id,
                                  operation_name = ops_name,
                                  cnf_btn_count = as.numeric(input[["confirm_changes_btn"]]),
                                  remove_btn_count = as.numeric(input[["remove_step"]]),
                                  ops_counter_ui = counter_ui)
      })
      
      return(reactive(rv_return$details))
    })
}

mutate_percentage_ops_remove_UI <- function(id) {
  moduleServer(
    id,
    function(input, output, session) {
      ns <- session$ns
      removeUI(selector = paste0("#",ns("DM_ops_main_div")),
               immediate = TRUE)
    })
}